nextflow_workflow {

    name "Test Workflow MAP_READS"
    script "workflows/map_reads.nf"
    workflow "MAP_READS"

    test("MAP_READS maps reads to a reference genome and outputs sorted BAMs -- bwa-mem2 + SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def readsLane2 = new ReadsSELane2()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane1.getRGFields().get('ID')}",
                                SM: "${readsLane1.getRGFields().get('SM')}",
                                LB: "${readsLane1.getRGFields().get('LB')}",
                                PL: "${readsLane1.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane2.getRGFields().get('ID')}",
                                SM: "${readsLane2.getRGFields().get('SM')}",
                                LB: "${readsLane2.getRGFields().get('LB')}",
                                PL: "${readsLane2.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane2.getR1()}"),
                        file("${readsLane2.getR2()}")
                    ]
                )
                input[1] = file("${refs.getGenome()}")
                input[2] = file("${refs.getGTF()}")
                input[3] = "bwamem2"
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success

            // test alignments for each individual coordinate sorted sample-lane
            with(workflow.out.alignmentsIndividualSortedByCoord) {
                assert size() == 2
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getStemName()}\.bam\.bai/
                }
                with(get(1)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane2.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane2.getStemName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and coordinate sorted sample
            with(workflow.out.alignmentsMergedSortedByCoord) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getSampleName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and name sorted sample
            with(workflow.out.alignmentsMergedSortedByName) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

    test("MAP_READS maps reads to a reference genome and outputs sorted BAMs -- bwa-mem2 + PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane1.getRGFields().get('ID')}",
                                SM: "${readsLane1.getRGFields().get('SM')}",
                                LB: "${readsLane1.getRGFields().get('LB')}",
                                PL: "${readsLane1.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane2.getRGFields().get('ID')}",
                                SM: "${readsLane2.getRGFields().get('SM')}",
                                LB: "${readsLane2.getRGFields().get('LB')}",
                                PL: "${readsLane2.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane2.getR1()}"),
                        file("${readsLane2.getR2()}")
                    ]
                )
                input[1] = file("${refs.getGenome()}")
                input[2] = file("${refs.getGTF()}")
                input[3] = "bwamem2"
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success

            // test alignments for each individual coordinate sorted sample-lane
            with(workflow.out.alignmentsIndividualSortedByCoord) {
                assert size() == 2
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getStemName()}\.bam\.bai/
                }
                with(get(1)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane2.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane2.getStemName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and coordinate sorted sample
            with(workflow.out.alignmentsMergedSortedByCoord) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getSampleName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and name sorted sample
            with(workflow.out.alignmentsMergedSortedByName) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

    test("MAP_READS maps reads to a reference genome and outputs sorted BAMs -- STAR + SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def readsLane2 = new ReadsSELane2()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane1.getRGFields().get('ID')}",
                                SM: "${readsLane1.getRGFields().get('SM')}",
                                LB: "${readsLane1.getRGFields().get('LB')}",
                                PL: "${readsLane1.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane2.getRGFields().get('ID')}",
                                SM: "${readsLane2.getRGFields().get('SM')}",
                                LB: "${readsLane2.getRGFields().get('LB')}",
                                PL: "${readsLane2.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane2.getR1()}"),
                        file("${readsLane2.getR2()}")
                    ]
                )
                input[1] = file("${refs.getGenome()}")
                input[2] = file("${refs.getGTF()}")
                input[3] = "star"
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success

            // test alignments for each individual coordinate sorted sample-lane
            with(workflow.out.alignmentsIndividualSortedByCoord) {
                assert size() == 2
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getStemName()}\.bam\.bai/
                }
                with(get(1)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane2.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane2.getStemName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and coordinate sorted sample
            with(workflow.out.alignmentsMergedSortedByCoord) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getSampleName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and name sorted sample
            with(workflow.out.alignmentsMergedSortedByName) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

    test("MAP_READS maps reads to a reference genome and outputs sorted BAMs -- STAR + PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()
        def refs       = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane1.getRGFields().get('ID')}",
                                SM: "${readsLane1.getRGFields().get('SM')}",
                                LB: "${readsLane1.getRGFields().get('LB')}",
                                PL: "${readsLane1.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}",
                            rgFields:     [
                                ID: "${readsLane2.getRGFields().get('ID')}",
                                SM: "${readsLane2.getRGFields().get('SM')}",
                                LB: "${readsLane2.getRGFields().get('LB')}",
                                PL: "${readsLane2.getRGFields().get('PL')}",
                            ]
                        ],
                        file("${readsLane2.getR1()}"),
                        file("${readsLane2.getR2()}")
                    ]
                )
                input[1] = file("${refs.getGenome()}")
                input[2] = file("${refs.getGTF()}")
                input[3] = "star"
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success

            // test alignments for each individual coordinate sorted sample-lane
            with(workflow.out.alignmentsIndividualSortedByCoord) {
                assert size() == 2
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getStemName()}\.bam\.bai/
                }
                with(get(1)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane2.getStemName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane2.getStemName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and coordinate sorted sample
            with(workflow.out.alignmentsMergedSortedByCoord) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 3
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                    // test indexed alignments file
                    assert get(2) ==~ /^.*\/${readsLane1.getSampleName()}\.bam\.bai/
                }
            }
            // test alignments for each merged and name sorted sample
            with(workflow.out.alignmentsMergedSortedByName) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    // test alignments file
                    assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}\.bam/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

}
