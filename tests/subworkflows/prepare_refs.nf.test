nextflow_workflow {

    name "Test Workflow Prepare_Refs"
    script "subworkflows/prepare_refs.nf"
    workflow "Prepare_Refs"

    test("Prepare_Refs successfully unzips and emits GZIP-compressed genome and GTF files.") {
        // instantiate helper objects
        def refs = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = file("${refs.getGenomeGzip()}")
                input[1] = file("${refs.getGTFGzip()}")
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success
            assert workflow.trace.succeeded().size() == 4

            // test genome decompressed
            assert workflow.out.genome
            with(workflow.out.genome) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I.fa/
            }

            // test genome fasta indexed
            assert workflow.out.genome_index
            with(workflow.out.genome_index) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I.fa.fai/
            }

            // test sequence dictionary file produced
            with(workflow.out.genome_dict) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I\.dict/
            }

            // test annotations decompressed
            assert workflow.out.annotations
            with(workflow.out.annotations) {
                assert size() == 1
                assert get(0) ==~ /^.*\/annotations_I.gtf/
            }

            // test reproducibility
            assert snapshot(
                workflow.out.genome,
                workflow.out.genome_index,
                workflow.out.annotations,
            ).match()
        }


    }
    test("Prepare_Refs successfully emits uncompressed genome and GTF files when uncompressed inputs are given.") {
        // instantiate helper objects
        def refs = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = file("${refs.getGenome()}")
                input[1] = file("${refs.getGTF()}")
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success
            assert workflow.trace.succeeded().size() == 2

            // test genome decompressed
            assert workflow.out.genome
            with(workflow.out.genome) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I.fa/
            }

            // test genome fasta indexed
            assert workflow.out.genome_index
            with(workflow.out.genome_index) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I.fa.fai/
            }

            // test sequence dictionary file produced
            with(workflow.out.genome_dict) {
                assert size() == 1
                assert get(0) ==~ /^.*\/genome_I\.dict/
            }

            // test annotations decompressed
            assert workflow.out.annotations
            with(workflow.out.annotations) {
                assert size() == 1
                assert get(0) ==~ /^.*\/annotations_I.gtf/
            }

            // test reproducibility
            assert snapshot(
                workflow.out.genome,
                workflow.out.genome_index,
                workflow.out.annotations,
            ).match()
        }

    }

}
