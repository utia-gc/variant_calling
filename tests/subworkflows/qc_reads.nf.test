nextflow_workflow {

    name "Test Workflow QC_Reads"
    script "subworkflows/qc_reads.nf"
    workflow "QC_Reads"

    def refs = new RefsEnsembl()

    test("QC_Reads reports QC for raw and prealigned reads -- cutadapt + SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        
        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "raw",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[1] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "trimmed",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[2] = Channel.of( file("${readsLane1.getTrimLogCutadapt()}") )
                input[3] = Channel.of( file("${refs.getGenomeIndex()}") )
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 6

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 5
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
                assert get(2) ==~ /^.*\/${readsLane1.getStemName()}_cutadapt-log.txt/
                assert get(3) ==~ /^.*\/${readsLane1.getSampleName()}_raw_seq-depth.tsv/
                assert get(4) ==~ /^.*\/${readsLane1.getSampleName()}_prealign_seq-depth.tsv/
            }
        }

    }

    test("QC_Reads reports QC for raw and prealigned reads -- cutadapt + PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        
        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "raw",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[1] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "trimmed",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[2] = Channel.of( file("${readsLane1.getTrimLogCutadapt()}") )
                input[3] = Channel.of( file("${refs.getGenomeIndex()}") )
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 6

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 7
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_raw_R2_fastqc.zip/
                assert get(2) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
                assert get(3) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R2_fastqc.zip/
                assert get(4) ==~ /^.*\/${readsLane1.getStemName()}_cutadapt-log.txt/
                assert get(5) ==~ /^.*\/${readsLane1.getSampleName()}_raw_seq-depth.tsv/
                assert get(6) ==~ /^.*\/${readsLane1.getSampleName()}_prealign_seq-depth.tsv/
            }
        }

    }

    test("QC_Reads reports QC for raw and prealigned reads -- fastp + SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        
        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "raw",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[1] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "trimmed",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[2] = Channel.of( file("${readsLane1.getTrimLogFastp()}") )
                input[3] = Channel.of( file("${refs.getGenomeIndex()}") )
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 6

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 5
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
                assert get(2) ==~ /^.*\/${readsLane1.getStemName()}_fastp.json/
                assert get(3) ==~ /^.*\/${readsLane1.getSampleName()}_raw_seq-depth.tsv/
                assert get(4) ==~ /^.*\/${readsLane1.getSampleName()}_prealign_seq-depth.tsv/
            }
        }

    }

    test("QC_Reads reports QC for raw and prealigned reads -- fastp + PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        
        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "raw",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[1] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}",
                            trimStatus:   "trimmed",
                        ],
                        file("${readsLane1.getR1()}"),
                        file("${readsLane1.getR2()}")
                    ]
                )
                input[2] = Channel.of( file("${readsLane1.getTrimLogFastp()}") )
                input[3] = Channel.of( file("${refs.getGenomeIndex()}") )
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 6

            // test output for full MultiQC
            assert workflow.out.multiqc
            with(workflow.out.multiqc.get(0)) {
                assert size() == 7
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_raw_R2_fastqc.zip/
                assert get(2) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
                assert get(3) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R2_fastqc.zip/
                assert get(4) ==~ /^.*\/${readsLane1.getStemName()}_fastp.json/
                assert get(5) ==~ /^.*\/${readsLane1.getSampleName()}_raw_seq-depth.tsv/
                assert get(6) ==~ /^.*\/${readsLane1.getSampleName()}_prealign_seq-depth.tsv/
            }
        }

    }

}
