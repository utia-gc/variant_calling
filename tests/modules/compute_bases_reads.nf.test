nextflow_process {

    name "Test Process compute_bases_reads"
    script "modules/compute_bases_reads.nf"
    process "compute_bases_reads"

    test("compute_bases_reads computes the number of bases in reads -- SE reads; one read") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                    ]
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases.get(0)) {
                assert size() == 2
                // test metadata
                with(get(0)) {
                    assert sampleName == "${readsLane1.getSampleName()}"
                    assert readType   == "${readsLane1.getReadType()}"
                    assert trimStatus == "raw"
                }
                // test number of bases
                with(get(1)) {
                    assert isNumber()
                    assert toInteger() > 0
                }
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }


    test("compute_bases_reads computes the number of bases in reads -- SE reads; multiple reads") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def readsLane2 = new ReadsSELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                        file("${readsLane2.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                        file("${readsLane2.getR2()}"),
                    ]
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases.get(0)) {
                assert size() == 2
                // test metadata
                with(get(0)) {
                    assert sampleName == "${readsLane1.getSampleName()}"
                    assert readType   == "${readsLane1.getReadType()}"
                    assert trimStatus == "raw"
                }
                // test number of bases
                with(get(1)) {
                    assert isNumber()
                    assert toInteger() > 0
                }
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }


    test("compute_bases_reads computes the number of bases in reads -- PE reads; one read") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                    ]
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases.get(0)) {
                assert size() == 2
                // test metadata
                with(get(0)) {
                    assert sampleName == "${readsLane1.getSampleName()}"
                    assert readType   == "${readsLane1.getReadType()}"
                    assert trimStatus == "raw"
                }
                // test number of bases
                with(get(1)) {
                    assert isNumber()
                    assert toInteger() > 0
                }
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }


    test("compute_bases_reads computes the number of bases in reads -- PE reads; multiple reads") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                        file("${readsLane2.getR1()}"),
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                        file("${readsLane2.getR2()}"),
                    ]
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases.get(0)) {
                assert size() == 2
                // test metadata
                with(get(0)) {
                    assert sampleName == "${readsLane1.getSampleName()}"
                    assert readType   == "${readsLane1.getReadType()}"
                    assert trimStatus == "raw"
                }
                // test number of bases
                with(get(1)) {
                    assert isNumber()
                    assert toInteger() > 0
                }
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }


}
