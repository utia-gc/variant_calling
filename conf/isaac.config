profiles {
    condo_trowan1 {
        workDir = "${SCRATCHDIR}/nf_work"

        executor {
            queueSize = 50
            submitRateLimit = '10/1min'
        }

        singularity {
            enabled    = true
            cacheDir   = "${SCRATCHDIR}/singularity"
            autoMounts = true
        }

        params {
            // max resources
            maxCpus   = 32
            maxMemory = '128.GB'
            maxTime   = '72.h'
        }

        process {
            executor = 'slurm'
            clusterOptions = '--account=ACF-UTK0171 \
                              --partition=condo-trowan1 \
                              --qos=condo \
                              --nodes=1'
            
            /*
            Set what happens if a process fails
            */
            errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
            maxRetries = 1

            /*
            Set CPUs
            */
            // default number CPUs
            cpus = { checkResources(1 * task.attempt, 'cpus') }

            // dynamic numbers CPUs
            withLabel: def_cpu {
                cpus = { checkResources(1 * task.attempt, 'cpus') }
            }

            withLabel: med_cpu {
                cpus = { checkResources(2 * task.attempt, 'cpus') }
            }

            withLabel: big_cpu {
                cpus = { checkResources(4 * task.attempt, 'cpus') }
            }

            withLabel: huge_cpu {
                cpus = { checkResources(8 * task.attempt, 'cpus') }
            }

            withLabel: sup_cpu {
                cpus = { checkResources(12 * task.attempt, 'cpus') }
            }

            withLabel: max_cpu {
                cpus = { checkResources(24 * task.attempt, 'cpus') }
            }

            /*
            Set memory
            */
            // default memory
            memory = { checkResources(2.GB * task.attempt, 'memory') }

            // dynamic levels memory
            withLabel: lil_mem {
                memory = { checkResources(2.GB * task.attempt, 'memory') }
            }

            withLabel: def_mem {
                memory = { checkResources(4.GB * task.attempt, 'memory') }
            }

            withLabel: med_mem {
                memory = { checkResources(8.GB * task.attempt, 'memory') }
            }
            
            withLabel: big_mem {
                memory = { checkResources(16.GB * task.attempt, 'memory') }
            }

            withLabel: huge_mem {
                memory = { checkResources(32.GB * task.attempt, 'memory') }
            }

            withLabel: sup_mem {
                memory = { checkResources(48.GB * task.attempt, 'memory') }
            }

            withLabel: max_mem {
                memory = { checkResources(96.GB * task.attempt, 'memory') }
            }

            /*
            Set time
            */
            // default time
            time = { checkResources(1.hour * task.attempt, 'time') }

            // dynamic levels time
            withLabel: lil_time {
                time = { checkResources(30.min * task.attempt, 'time') }
            }

            withLabel: def_time {
                time = { checkResources(1.hour * task.attempt, 'time') }
            }

            withLabel: med_time {
                time = { checkResources(4.hour * task.attempt, 'time') }
            }
            
            withLabel: big_time {
                time = { checkResources(16.hour * task.attempt, 'time') }
            }

            withLabel: huge_time {
                time = { checkResources(24.hour * task.attempt, 'time') }
            }

            withLabel: sup_time {
                time = { checkResources(32.hour * task.attempt, 'time') }
            }

            withLabel: max_time {
                time = { checkResources(48.hour * task.attempt, 'time') }
            }

            withLabel: max_time {
                time = { checkResources(48.hour * task.attempt, 'time') }
            }
        }
    }

    campus {

        executor {
            queueSize = 50
            submitRateLimit = '10/1min'
        }

        process {
            withLabel: lil_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p campus \
                                  -q campus'
                cpus = 2
            }
            withLabel: med_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p campus \
                                  -q campus'
                cpus = 8
            }
            withLabel: big_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p campus \
                                  -q campus'
                cpus = 16
            }
            withLabel: sup_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p campus \
                                  -q campus'
                cpus = 16
                maxForks = 1
            }

        }
    }
    
    genomics {

        executor {
            queueSize = 10
            submitRateLimit = '10/1min'
        }

        process {
            withLabel: lil_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p condo-ut-genomics \
                                  -q genomics'
                cpus = 2
                maxForks = 1
            }
            withLabel: med_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p condo-ut-genomics \
                                  -q genomics'
                cpus = 8
                maxForks = 1
            }
            withLabel: big_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p condo-ut-genomics \
                                  -q genomics'
                cpus = 16
                maxForks = 1
            }
            withLabel: sup_mem {
                clusterOptions = '-A ISAAC-UTK0192 \
                                  -p condo-ut-genomics \
                                  -q genomics'
                cpus = 16
                maxForks = 1
            }

        }
    }

}

/**
 * Check that resources don't exceed a max value
 *
 * @param level The level of the resource requested (e.g. 4 CPUs, 8 GB memory, 12 hours)
 * @param resource The resource being check: cpus, memory, or time
 *
 * @return A level for the resource. If level is less than or equal to the max level for that resource, the specified level is returned, else max level is returned.
*/
def checkResources(level, resource) {
    switch (resource) {
        // check cpus
        case 'cpus':
            if (level.compareTo(params.maxCpus) == 1) {
                return params.maxCpus as int
            } else {
                return level
            }
            break
        
        // check memory
        case 'memory':
            if (level.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1) {
                return params.maxMemory as nextflow.util.MemoryUnit
            } else {
                return level
            }
            break
            
        // chek time
        case 'time':
            if (level.compareTo(params.maxTime as nextflow.util.Duration) == 1) {
                return params.maxTime as nextflow.util.Duration
            } else {
                return level
            }
            break
    }
}
